/**
 * @license
 * Copyright Bradesco S/A. All Rights Reserved.
 */
import { AMBUser, AMBAuthentication, AMBAuthorization, Observable, AMBRolesMapping } from '@amb/core';
import { AMBMockFile } from '../mock/amb.mock-file';
/**
 *
 * Implementação da interface {IAMBAuthentication}, faz logon de acordo com dados contidos
 * no arquivo users-mock.json. Fez uso de dados assincronos.
 *cd..
 cd..
 * @export
 * @class AMBMockedAuthentication
 * @implements {Authenticator} @see {@link AMBAuthentication}
 */
export declare class AMBMockedAuthentication implements AMBAuthentication {
    /** Define se o usuário esta autenticado */
    private _authenticated;
    /**Usuário */
    private _user;
    /** Serviço de autorização da AMB */
    private _authorization;
    /**Controlador da sessão */
    private _storage;
    /** Delay para simular tempo de login */
    private _delayDuration;
    /** Arquivo de mock */
    private _mockFile;
    /** Arquivo de mapeamento de roles */
    private _mapping;
    private _logger;
    /** Construtor da classe */
    constructor(authorization: AMBAuthorization, mockFile: AMBMockFile, mapping: AMBRolesMapping);
    /**
     * @override
     *
     * Retorna se o usuário esta autenticado
     */
    isAuthenticated(): boolean;
    /**
     * @override
     * Efetua login do usuário
     *
     * @param username usuário
     * @param password senha
     */
    login(username: string, password: string): Observable<any>;
    /**
     * @override
     *
     * Efetua logoff do usuário
     *
     */
    logoff(): Observable<any>;
    /**
     * retorna o usuário
     */
    readonly user: AMBUser;
}
