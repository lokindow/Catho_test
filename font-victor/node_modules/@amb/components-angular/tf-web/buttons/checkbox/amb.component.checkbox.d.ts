/**
 * @license
 * Copyright Bradesco S/A. All Rights Reserved.
 */
import { ElementRef, EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { AMBComponent } from '../../../core/amb.component';
/**
 * Definição do componente AMBCheckbox.
 *
 * @selector amb-checkbox
 * @templateUrl checkbox.component.html
 * @styleUrls checkbox.component.scss
 *
 * @see {@link https://angular.io/api/core/Component}
 */
export declare class AMBCheckBoxComponent extends AMBComponent implements ControlValueAccessor {
    protected elementRef: ElementRef;
    /** Rótulo do componente. */
    label: string;
    /** Indica se o componente está checado. */
    private _checked;
    accesskey: string;
    /**
     * Chamado quando a caixa de seleção está desfocada. Necessário para implementar corretamente o ControlValueAccessor.
     */
    _onTouched: () => any;
    /**
     * Evento para propagar o novo valor do componente. Necessário para implementar corretamente o ControlValueAccessor.
     */
    propagateChange: (_: any) => void;
    checkChangedEvent: EventEmitter<Object>;
    /**
     * @constructor
     * Construtor padrão.
     *
     * @param elementRef Elemento DOM representando o componente.
     */
    constructor(elementRef: ElementRef);
    /**
     * Get e Set da propriedade checked.
     */
    checked: boolean;
    /**
     * Define o valor do modelo. Implementado como parte do ControlValueAccessor.
     * @param value
     */
    writeValue(value: any): void;
    /**
     * Registra um retorno de chamada para ser ativado quando o controle é tocado.
     * Implementado como parte do ControlValueAccessor.
     * @param fn Callback a ser registrado.
     */
    registerOnTouched(fn: any): void;
    /**
     * Registra um retorno de chamada para ser ativado quando o valor do modelo muda.
     * Implementado como parte do ControlValueAccessor.
     * @param fn Callback a ser registrado.
     */
    registerOnChange(fn: (value: any) => void): void;
    /**
     * Alterar o valor do atributo checked
     */
    toggle(): void;
    /**
     * Callback chamado ao disparar o event click
     */
    onClickEvent(event: any): void;
    /**
     * Callback chamado ao disparar o event change
     */
    onChangeEvent(event: Event): void;
}
