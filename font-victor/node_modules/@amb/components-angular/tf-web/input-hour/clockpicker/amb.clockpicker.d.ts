import { Observable } from "rxjs/Observable";
import { ClockpickerOptions } from "./amb.clockpicker.options";
/**
* Classe responsável por manter o componente Clockpicker
*
* @description
* Esta classe tem por objetivo criar, mostrar, esconder e posicionar o componente Clockpicker
*
*/
export declare class Clockpicker {
    private popover;
    private plate;
    private hoursView;
    private minutesView;
    private amPmBlock;
    private body;
    private id;
    private isAppended;
    private isShown;
    private currentView;
    private spanHours;
    private spanMinutes;
    private spanAmPm;
    private amOrPm;
    private isInput;
    private input;
    private addon;
    private timer;
    private options;
    private touchSupported;
    private mousedownEvent;
    private mousemoveEvent;
    private mouseupEvent;
    private svgSupported;
    private hand;
    private bg;
    private fg;
    private bearing;
    private g;
    private canvas;
    private element;
    private minutes;
    private hours;
    private subject;
    private _observable;
    /**
     * Construtor padrão
     *
     * @param element Elemento DOM ao qual o Clockpicker será adicionado.
     * @param options opções do Clockpicker.
     */
    constructor(element: JQuery, options: ClockpickerOptions);
    /**
     * Método responsável por criar o componente Clockpicker
     */
    private initClockpicker();
    /**
     * Método responsável por mostrar o componente quando o input for clicado
     * @param ev Evento de click
     * @param space espaço estre os blocos de horas e minutos
     */
    mousedown(ev: any, space: any): void;
    /**
     * Método responsável por realizar a chamada as funções de callback
     * @param callbackFunction função de callback
     */
    raiseCallback(callbackFunction: any): void;
    /**
     * Método responsável por realizar a troca da View do Clockpicker entre hora e minutos.
     * @param view view que será mostrada: Hora ou Minuto
     * @param delay tempo de transição entre as views
     */
    toggleView(view: any, delay?: any): void;
    /**
     * Método responsável por esconder o componente Clockpicker quando o botão confirmar for acionado.
     */
    done(): void;
    /**
     * Método responsável por mostrar o componente Clockpicker
     */
    show(): void;
    /**
     * Método responsável por realizar a troca de estado do componente Clockpicker entre visível e não vísivel
     */
    toggle(): void;
    /**
     * Método responsável por esconder o componente Clockpicker
     */
    hide(): void;
    /**
     * Método responsável por recalcular a posição do componente assim como atualiza-lo visualmente.
     * @param delay tempo para realizar a atualização.
     */
    resetClock(delay: any): void;
    /**
     * Método responsável por calcular a posição do ponteiro e adicionar as animações e efeitos.
     *
     * @param x - posição x
     * @param y - posição y
     * @param roundBy5 - posição arrendada.
     * @param dragging - Determina se o componente esta sendo movido.
     */
    setHand(x: any, y: any, roundBy5?: any, dragging?: any): void;
    /**
     * Método responsável por calcular a posíção do componente Clockpicker
     */
    locale(): void;
    /**
     * Método responsável por recuperar a instância do observable do componente Clockpicker;
     */
    readonly observable: Observable<any>;
}
