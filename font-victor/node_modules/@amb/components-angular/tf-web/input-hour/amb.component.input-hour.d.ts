/**
 * @license
 * Copyright Bradesco S/A. All Rights Reserved.
 */
import { AMBComponent } from "../../core/amb.component";
import { ElementRef, EventEmitter } from "@angular/core";
import { ClockpickerOptions } from './clockpicker/amb.clockpicker.options';
import 'jquery-mask-plugin';
import { ControlValueAccessor } from "@angular/forms";
/**
 * Definição do componente AMBInputHourComponent.
 *
 * @selector amb-input-hour
 * @templateUrl amb.component.input-hour.html
 * @styleUrls amb.component.input-hour.scss
 *
 * @see {@link https://angular.io/api/core/Component}
 */
export declare class AMBInputHourComponent extends AMBComponent implements ControlValueAccessor {
    protected elementRef: ElementRef;
    /**
     * Evento que permite capturar a data selecionada
     */
    hourSelect: EventEmitter<string>;
    /**
     * Define uma dica para entrada do dado;
     */
    placeholder: string;
    /**
     * Armazena a função que será disparada quando um dia for selecionado.
     */
    onShowClock: Function;
    /**
     * Armazena a função que será disparada quando um dia for selecionado.
     */
    onHideClock: Function;
    /**
     * Armazena o valor inserido no componente.
     */
    hourValue: string;
    /**
     * Armazena a posição do componente.
     */
    placement: string;
    /**
     * Permite habilitar o botão de confirmar do componente.
     */
    autoClose: boolean;
    /**
     * Função que será acionada quando uma hora for definida
     */
    onHourSelect: () => {};
    /**
     * Função que será acionada quando o botão confirmar for clicado.
     */
    clickDone: () => {};
    /**
     * Chamado quando a caixa de seleção está desfocada. Necessário para implementar corretamente o ControlValueAccessor.
     */
    _onTouched: () => any;
    /**
     * Evento para propagar o novo valor do componente. Necessário para implementar corretamente o ControlValueAccessor.
     */
    propagateChange: (_: any) => void;
    /**
     * Formato padrão do componente.
     */
    private readonly HOUR_FORMAT;
    /**
     * @constructor
     * Construtor padrão.
     *
     * @param elementRef Elemento DOM representando o componente.
     */
    constructor(elementRef: ElementRef);
    /**
     * Define o valor do modelo. Implementado como parte do ControlValueAccessor.
     * @param value
     */
    writeValue(value: any): void;
    /**
     * Registra um retorno de chamada para ser ativado quando o controle é tocado.
     * Implementado como parte do ControlValueAccessor.
     * @param fn Callback a ser registrado.
     */
    registerOnTouched(fn: any): void;
    /**
     * Registra um retorno de chamada para ser ativado quando o valor do modelo muda.
     * Implementado como parte do ControlValueAccessor.
     * @param fn Callback a ser registrado.
     */
    registerOnChange(fn: (value: any) => void): void;
    /**
     * No carregamento do componente este método adiciona o formato de apresentação do campo junto com a mascara
     * além de criar o calendário.
     *
     */
    ngOnInit(): void;
    /**
     * Quando o input for devidamente configurado será criado o widget de relógio
     */
    ngAfterViewInit(): void;
    /**
     * Método responsável por configurar o widget de relógio.
     */
    initOptions(): ClockpickerOptions;
    /**
     * Método responsável por definir a mascara para o componente Input Date;
     * @param campo
     */
    private maskOption(campo);
}
