/**
 * @license
 * Copyright Bradesco S/A. All Rights Reserved.
 */
import { Injector } from "@angular/core";
import { ToastConfig } from "../interfaces/amb.toast-config";
import { ToastEvent } from "../interfaces/amb.toast.event";
import { Observable } from "rxjs/Observable";
import { ToastOptions } from "../interfaces/amb.toast-options";
/**
 * @Serviço @name ToastService
 * Serviço para o Toast.
 *
 * @description
 * O serviço ToastService é responsável por controlar o ciclo de vida do Toast
 *
 */
export declare class ToastService {
    private config;
    private injector;
    /**
     * Atributo usado para criar um id único para o toast
     */
    private counter;
    /**
     * Atributo responsável por emitir eventos ao observable
     */
    private eventSource;
    /**
     * Atributo responsável por capturar os eventos emitidos.
     */
    events: Observable<ToastEvent>;
    /**
     * Atributo responsável por armazenar uma instancia do container do toast
     */
    private toastContainer;
    /**
     * Construtor padrão
     * @param config - valores padrão do toast
     * @param injector - responsável por criar o container para o toast
     */
    constructor(config: ToastConfig, injector: Injector);
    /**
    * Aciona a criação do toast
    */
    createToast(options: ToastOptions | string | number): void;
    /**
     * Cria um toast com os seus devidos atributos e emite um evento de adição para ser adicionado em tela.
     *
     * @param options - atributos do componente toast
     */
    private add(options);
    /**
     * Método responsável por emitir o evento de remover todos os toast da tela.
     */
    clearAll(): void;
    /**
     * Método responsável por emitir o evento de remover um determinado toast da tela
     * @param id - identificador do toast que será removido.
     */
    clear(id: number): void;
    /**
     * Método responsável por verificar se determinada propriedade foi definada ou se deverá utilizar o valor padrão.
     *
     * @param config - valores padrão
     * @param options - valores definidos
     * @param property - propriedades
     */
    private _checkConfigItem(config, options, property);
    /**
     * Responsável por emitir os eventos para o observable;
     * @param event
     */
    private emitEvent(event);
    /**
     * Método responsável por criar o container para o componente toast
     */
    private show();
}
