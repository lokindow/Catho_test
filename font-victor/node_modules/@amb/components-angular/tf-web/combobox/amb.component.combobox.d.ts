/**
 * @license
 * Copyright Bradesco S/A. All Rights Reserved.
 */
import { ElementRef, EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { AMBComponent } from '../../core/amb.component';
import { AMBComboboxItemComponent } from './combobox-item/amb.component.combobox-item';
/**
 * Definição do componente AMBComboBoxComponent.
 *
 * @selector amb-combobox
 * @templateUrl combobox.component.html
 * @styleUrls combobox.component.scss
 *
 * @see {@link https://angular.io/api/core/Component}
 */
export declare class AMBComboBoxComponent extends AMBComponent implements ControlValueAccessor {
    protected elementRef: ElementRef;
    disabled: boolean;
    placeholder: String;
    inputWidth: String;
    menuHeight: String;
    protected opened: boolean;
    initialValue: string;
    protected selectedLabel: String;
    protected selectedValue: String;
    protected selectedModel: any;
    domItemsList: Array<HTMLElement>;
    protected buttonSelector: String;
    protected divSelector: String;
    protected comboChange: EventEmitter<any>;
    selectItems: Array<AMBComboboxItemComponent>;
    /**
     * Chamado quando a caixa de seleção está desfocada. Necessário para implementar corretamente o ControlValueAccessor.
     */
    _onTouched: () => any;
    /**
     * Evento para propagar o novo valor do componente. Necessário para implementar corretamente o ControlValueAccessor.
     */
    propagateChange: (_: any) => void;
    /**
     * @constructor
     * Construtor padrão.
     *
     * @param elementRef Elemento DOM representando o componente.
     */
    constructor(elementRef: ElementRef);
    /**
     * Define o valor do modelo. Implementado como parte do ControlValueAccessor.
     * @param value
     */
    writeValue(value: any): void;
    /**
     * Registra um retorno de chamada para ser ativado quando o controle é tocado.
     * Implementado como parte do ControlValueAccessor.
     * @param fn Callback a ser registrado.
     */
    registerOnTouched(fn: any): void;
    /**
     * Registra um retorno de chamada para ser ativado quando o valor do modelo muda.
     * Implementado como parte do ControlValueAccessor.
     * @param fn Callback a ser registrado.
     */
    registerOnChange(fn: (value: any) => void): void;
    ngOnInit(): void;
    /**
     * Guardar o valor do item selecionado.
     * Percorrer os itens de selecao para limpar o class, e apos isso, adicionar o class ao item selecionado
     *
     * @param item
     */
    selectItem(item: AMBComboboxItemComponent): void;
    /**
     * Aplicar o estilo para itens selecionados
     */
    private addSelectedClass(itemSelecionado);
    /**
     * Filtra os itens do combo, deve ser implementado pelo combo de busca.
     * @param event
     */
    filter(event: any): void;
    /**
     * Disparar evento para a funcao do cliente, para ele obter o objeto do item selecionado
     *
     * @param model Objeto representante de um item da lista
     */
    getSelectedItem(model: any): void;
    /**
     * toggle
     * Abrir/Fechar a div com os elementos para selecao
     */
    toggle(event: Event): void;
    /**
     * Mostrar a div com as opcoes de selecao
     */
    showItems(): void;
    /**
     * Esconder a div com as opcoes de selecao
     */
    hideItemsFromBlur(event: any): void;
    /**
    * Esconder a div com as opcoes de selecao
    */
    hideItems(): void;
    /**
     * Cancelar o evento disparado
     *
     * @param event
     */
    cancelEvent(event: any): void;
    findCombo(): void;
}
