/**
 * @license
 * Copyright Bradesco S/A. All Rights Reserved.
 */
import { ElementRef, OnInit, AfterViewInit, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { AMBComponent } from '../../core/amb.component';
import { AMBPreLoaderDirective } from '../pre-loader/pre-loader.directive';
import { AMBImageViewerModel } from './model/amb.image-viewer-model';
/**
 * Definição do componente AMBButton.
 *
 * @selector amb-button
 * @templateUrl button.component.html
 * @styleUrls button.component.scss
 *
 * @see {@link https://angular.io/api/core/Component}
 */
export declare class AMBImageViewerComponent extends AMBComponent implements OnInit, AfterViewInit {
    protected elementRef: ElementRef;
    private changeDetector;
    /**
     * Diretiva de preLoader para controle de troca de imagens
     *
     * @type {AMBPreLoaderDirective}
     * @memberof AMBImageViewerComponent
     */
    preLoader: AMBPreLoaderDirective;
    /**
     *Escala da imagem
     *
     * @private
     * @type {number}
     * @memberof AMBImageViewerComponent
     */
    private scale;
    /**
     * rotação da imagem para obtenção por parte da aplicação funcional
     *
     * @private
     * @type {string}
     * @memberof AMBImageViewerComponent
     */
    private rotate;
    /**
     *Rotação real da imagem para controle do efeito de transição
     *
     * @private
     * @type {number}
     * @memberof AMBImageViewerComponent
     */
    private rotateAnimate;
    /**
     *
     * Define se a imagem é arrastável. Só deve ser true quando em zoom
     *
     * @private
     * @type {boolean}
     * @memberof AMBImageViewerComponent
     */
    private draggable;
    /**
     * Bloqueia o botão first
     *
     * @private
     * @type {boolean}
     * @memberof AMBImageViewerComponent
     */
    private disableFirst;
    /**
     *
     * Bloqueia o botão previous
     *
     * @private
     * @type {boolean}
     * @memberof AMBImageViewerComponent
     */
    private disablePrevious;
    /**
     *Bloqueia o botão next
     *
     * @private
     * @type {boolean}
     * @memberof AMBImageViewerComponent
     */
    private disableNext;
    /**
     *Bloqueia o botão last
     *
     * @private
     * @type {boolean}
     * @memberof AMBImageViewerComponent
     */
    private disableLast;
    /**
     *Bloqueia o botão de zoomOut
     *
     * @private
     * @type {boolean}
     * @memberof AMBImageViewerComponent
     */
    private disableZoomOut;
    /**
     * Índice da imagem em exibição
     *
     * @private
     * @type {number}
     * @memberof AMBImageViewerComponent
     */
    private position;
    /**
     *
     * Lista de imagems a serem exibidas
     *
     * @type {AMBImageViewerModel[]}
     * @memberof AMBImageViewerComponent
     */
    _imageList: AMBImageViewerModel[];
    /**
     *
     * Define se o componente já foi iniciado
     *
     * @private
     * @type {boolean}
     * @memberof AMBImageViewerComponent
     */
    private initiated;
    /**
     * Define a altura do container da imagem
     *
     * @type {string}
     * @memberof AMBImageViewerComponent
     */
    innerHeight: string;
    /**
     *
     * Contém as informações da iamgem para obtenção na aplicação funcional
     *
     * @type {EventEmitter<AMBImageViewerModel>}
     * @memberof AMBImageViewerComponent
     */
    imageInfo: EventEmitter<AMBImageViewerModel>;
    /**
     *
     * Define se os botões de zoom devem ser exibidos
     *
     * @type {boolean}
     * @memberof AMBImageViewerComponent
     */
    showZoom: boolean;
    /**
     * Define se os botões de rotação devem ser exibidos
     *
     * @type {boolean}
     * @memberof AMBImageViewerComponent
     */
    showRotate: boolean;
    /**
     *
     * Define se os botões de paginação devem ser exibidos
     *
     * @type {boolean}
     * @memberof AMBImageViewerComponent
     */
    showPagination: boolean;
    /**
     *Get para a lista de imagens
     *
     * @readonly
     * @type {AMBImageViewerModel[]}
     * @memberof AMBImageViewerComponent
     */
    /**
     *
     * Sobrescreve o método set para controlar a reexibição da
     * imagem caso esta sofra alterações por parte da aplicação funcional.
     * Ex.: Troca de formato de imagem
     *
     * @memberof AMBImageViewerComponent
     */
    imageList: AMBImageViewerModel[];
    /**
     *Creates an instance of AMBImageViewerComponent.
     * @param {ElementRef} elementRef
     * @param {ChangeDetectorRef} changeDetector
     * @memberof AMBImageViewerComponent
     */
    constructor(elementRef: ElementRef, changeDetector: ChangeDetectorRef);
    /**
     * Método da interface Oninit
     *
     */
    ngOnInit(): void;
    /**
     * Método da interface AfterViewInit
     *
     */
    ngAfterViewInit(): void;
    /**
     * Adiciona a funcionalidade de reajustar o tamanho da imagem conforme a tela é redimensionada
     *
     */
    private onResize();
    /**
     * Redimensiona a imagem para o tamanho do container
     */
    private resizeImage();
    /**
     * Rotaciona a imagem em sentido horário
     */
    rotateClockwise(): void;
    /**
     * Rotaciona a imagem em sentido anti horário
     */
    rotateAnticlockwise(): void;
    /**
     * Efetua ZoomIn na imagem
     */
    zoomIn(): void;
    /**
     * Efetua zoomOut
     */
    zoomOut(): void;
    /**
     * REtorna ao zoom default
     */
    zoomDefault(): void;
    /**
     * Controla as transformações da imagem relacionadas à rotação e zoom.
     */
    private transform();
    /**
     * retorna a primeira imagem
     */
    private first();
    /**
     * Retorna à imagem anterior
     */
    private previous();
    /**
     * Passa para a próxima imagem
     */
    private next();
    /**
     * Passa para a última imagem
     */
    private last();
    /**
     * Efetua o controle de exibição da imagem
     */
    showImage(): void;
    /**
     * controla o bloqueio dos botões de paginação
     */
    private controlPaginationButtons();
    /**
     * Exibe a imagem em tela cheia
     */
    private showModal();
    /**
     * Fecha o modal da imagem em tela cheia
     */
    private closeModal();
    /**
     * Atualiza o estado da imagem atual
     */
    private updateImageInfo();
    /**
     * Cotnrola o redimensionamento da imagem em tela cheia
     */
    private resizeModalImage();
}
