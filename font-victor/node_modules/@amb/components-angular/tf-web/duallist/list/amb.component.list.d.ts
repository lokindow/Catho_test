/**
 * @license
 * Copyright Bradesco S/A. All Rights Reserved.
 */
import { ElementRef } from '@angular/core';
import { AMBComponent } from '../../../core/amb.component';
import { AMBDuallistService } from '../services/amb.duallist.service';
import { AMBDuallistComponent } from '../amb.component.duallist';
import { ControlValueAccessor } from '@angular/forms';
/**
 * Definição do componente AMBListComponent.
 *
 * @selector amb-list
 * @templateUrl amb.component.list.html
 * @styleUrls amb.component.list.scss
 *
 * @see {@link https://angular.io/api/core/Component}
 */
export declare class AMBListComponent extends AMBComponent implements ControlValueAccessor {
    private duallistService;
    private duallist;
    items: Element[] | null;
    width: String;
    height: String;
    listTitle: string;
    id: string;
    name: string;
    private select;
    protected selectedItems: any[];
    /**
     * Chamado quando a caixa de seleção está desfocada. Necessário para implementar corretamente o ControlValueAccessor.
     */
    _onTouched: () => any;
    /**
     * Evento para propagar o novo valor do componente. Necessário para implementar corretamente o ControlValueAccessor.
     */
    propagateChange: (_: any) => void;
    /**
     * Método construtor da classe
     * @param elementRef Objeto DOM do List
     * @param duallistService Objeto Service
     * @param duallist Objeto Duallist
     */
    constructor(elementRef: ElementRef, duallistService: AMBDuallistService, duallist: AMBDuallistComponent);
    /**
     * Método do ciclo de vida
     */
    ngAfterViewInit(): void;
    /**
       * Define o valor do modelo. Implementado como parte do ControlValueAccessor.
       * @param value
       */
    writeValue(value: any): void;
    /**
     * Registra um retorno de chamada para ser ativado quando o controle é tocado.
     * Implementado como parte do ControlValueAccessor.
     * @param fn Callback a ser registrado.
     */
    registerOnTouched(fn: any): void;
    /**
     * Registra um retorno de chamada para ser ativado quando o valor do modelo muda.
     * Implementado como parte do ControlValueAccessor.
     * @param fn Callback a ser registrado.
     */
    registerOnChange(fn: (value: any) => void): void;
    /**
     * Registra os listeners para cada evento
     */
    private initListener();
    /**
     * Verificar se o objeto em questao está na direita ou esquerda
     */
    private isRight();
    /**
     * Obter os itens selecionados
     * @param select Elemento DOM Select
     * @param items Itens
     * @param newItems Nova lista
     * @param moveAll Flag que identifica se devemos mover tudo ou não
     */
    private getSelectedItems(select, items, newItems, moveAll);
}
