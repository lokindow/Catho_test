/**
 * @license
 * Copyright Bradesco S/A. All Rights Reserved.
 */
import { EventEmitter, OnChanges, OnDestroy, OnInit } from '@angular/core';
import { CanDisable } from './amb.disabled';
import { SortDirection } from './amb.sort-direction';
import { Subject } from 'rxjs/Subject';
import { AMBTableComponent } from '../amb.component.table';
/** Interface para uma diretiva que contenha o estado de classificação consumido pelo `AMBSortHeader`. */
export interface AMBSortable {
    /** O id da coluna a ser ordenada. */
    id: string;
    /** Iniciando a direção de classificação. */
    start: 'asc' | 'desc';
    /** Se deseja desativar a limpeza do estado de classificação. */
    disableClear: boolean;
}
/** O estado de classificação atual. */
export interface Sort {
    /** O ID da coluna sendo ordenada. */
    active: string;
    /** Ordenação. */
    direction: SortDirection;
}
export declare class AMBSortBase {
}
export declare const _AMBSortMixinBase: (new (...args: any[]) => CanDisable) & typeof AMBSortBase;
/** Container for AMBSortables para gerenciar o estado de classificação e fornecer parâmetros de classificação padrão. */
export declare class AMBSort extends _AMBSortMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {
    private table;
    /** Coleta de todos os sorters registrados que esta diretriz gere. */
    sortables: Map<string, AMBSortable>;
    /** Usado para notificar qualquer componente filho, ouvindo as mudanças de estado. */
    _stateChanges: Subject<void>;
    /** O id do AMBSortable classificado mais recentemente. */
    active: string;
    /**
     * A direção a ser definida quando um AMBSortable é ordenado inicialmente.
     * Pode ser superado pelo início do tipo AMBSortable.
     */
    start: 'asc' | 'desc';
    /** A direção de classificação do AMBSortable atualmente ativo. */
    direction: SortDirection;
    private _direction;
    /**
     * Se deseja desativar o usuário de limpar o tipo, finalizando o ciclo de direção de classificação.
     * Pode ser superado pela entrada desativável desativada do AMBSortable.
     */
    disableClear: boolean;
    private _disableClear;
    /** Evento emitido quando o usuário altera a direção ativa ou a direção de classificação. */
    readonly sortChange: EventEmitter<Sort>;
    constructor(table: AMBTableComponent<any>);
    /**
     * Função de registro a ser usada pelos AMBSortables contidos. Adiciona AMBSortable ao
     * coleção de AMBSortables.
     */
    register(sortable: AMBSortable): void;
    /**
     * Desregistre a função para ser usada pelos AMBSortables contidos. Remove o AMBSortable do
     * coleção de AMBSortables contidos.
     */
    deregister(sortable: AMBSortable): void;
    /** Define o ID de classificação ativo e determina a nova direção de classificação. */
    sort(sortable: AMBSortable): void;
    /** Retorna a próxima direção de classificação do classificador ativo, verificando possíveis anulações. */
    getNextSortDirection(sortable: AMBSortable): SortDirection;
    ngOnInit(): void;
    ngOnChanges(): void;
    ngOnDestroy(): void;
}
