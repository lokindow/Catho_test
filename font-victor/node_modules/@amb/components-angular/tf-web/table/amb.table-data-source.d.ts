import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { Subscription } from 'rxjs/Subscription';
/**
 * Fonte de dados que aceita uma matriz de dados do lado do cliente e inclui suporte nativo de filtragem,
 * classificação (usando AMBSort) e paginação (usando o AMBPaginator).
 *
 * @description
 * Permite a personalização de classificação substituindo classingDataAccessor, que define como os dados
 * as propriedades são acessadas. Também permite a personalização do filtro substituindo filterTermAccessor,
 * que define como dados de linha são convertidos em uma string para correspondência de filtro.
 *
 * @extends DataSource
 *
 */
export declare class AMBTableDataSource<T> {
    /** Emitido quando uma nova matriz de dados é definida na fonte de dados. */
    private _data;
    /** Emissor de renderização de dados para a tabela (depende de mudanças de dados ordenados). */
    private _renderData;
    /** Emitido quando uma nova string de filtro é definida na fonte de dados. */
    private _filter;
    /**
     * Subscrição das alterações que devem desencadear uma atualização para as linhas renderizadas da tabela,
     * como filtragem, classificação, paginação ou mudanças de dados base.
     */
    _renderChangesSubscription: Subscription;
    /**
     * Conjunto de dados filtrado que foi combinado com a cadeia de filtro ou todos os dados, se houver
     * não é um filtro. Útil para conhecer o conjunto de dados que a tabela representa.
     * Por exemplo, uma função 'selectAll ()' provavelmente quer selecionar o conjunto de dados filtrados
     * mostrado ao usuário em vez de todos os dados.
     */
    filteredData: T[];
    /** Array de dados que devem ser renderizados pela tabela, onde cada objeto representa uma linha. */
    data: T[];
    /**
     * Termo de filtro que deve ser usado para filtrar objetos da matriz de dados. Para substituir como
     * os objetos de dados correspondem a essa string de filtro, fornecem uma função personalizada para filterPredicate.
     */
    filter: string;
    /**
     * Instância da diretiva AMBSort usada pela tabela para controlar sua classificação. Classificar alterações
     * emitido pelo AMBSort irá ativar uma atualização para os dados renderizados da tabela.
     */
    sort: any | null;
    private _sort;
    /**
     * Instância do componente AMBPaginator usado pela tabela para controlar qual página dos dados é
     * exibido. As alterações de página emitidas pelo AMBPaginator ativarão uma atualização para o
     * dados renderizados da tabela.
     *
     * Observe que a fonte de dados usa as propriedades do paginador para calcular qual página de dados
     * deve ser exibido. Se o paginador receber suas propriedades como entradas de modelo,
     * por exemplo. `[pageLength] = 100` ou` [pageIndex] = 1`, então certifique-se de que a visão do paginador tenha sido
     * inicializado antes de atribuí-lo a essa fonte de dados.
     */
    paginator: any | null;
    private _paginator;
    /**
     * Função de acesso de dados que é usada para acessar propriedades de dados para classificação.
     * Esta função padrão pressupõe que as IDs de cabeçalho de classificação (que padrão é o nome da coluna)
     * corresponde às propriedades dos dados (por exemplo, a coluna Xyz representa dados ['Xyz']).
     * Pode ser configurado para uma função personalizada para diferentes comportamentos.
     * @param data Objeto de dados que está sendo acessado.
     * @param sortHeaderId O nome da coluna que representa os dados.
     */
    sortingDataAccessor: ((data: T, sortHeaderId: string) => string | number);
    /**
     * Verifica se um objeto de dados corresponde à cadeia de filtro da fonte de dados. Por padrão, cada objeto de dados
     * é convertido em uma string de suas propriedades e retorna verdadeiro se o filtro tiver
     * pelo menos uma ocorrência naquela corda. Por padrão, a cadeia de filtros tem seu espaço em branco
     * aparado e a partida não é sensível a maiúsculas e minúsculas. Pode ser superado para uma implementação personalizada de
     * correspondência de filtro.
     * @param data Objeto de dados usado para verificar contra o filtro.
     * @param filter Seqüência de filtros que foi configurada na fonte de dados.
     * @returns Se o filtro coincide com os dados.
     */
    filterPredicate: ((data: T, filter: string) => boolean);
    constructor(initialData?: T[]);
    /**
     * Atualiza as alterações que devem desencadear uma atualização para as linhas renderizadas da tabela. Quando as
     * mudanças ocorrem, processa o estado atual do filtro, ordenação e paginação, juntamente com
     * os dados básicos fornecidos e envia para a tabela para renderização.
     */
    _updateChangeSubscription(): void;
    /**
     * Retorna uma matriz de dados filtrada onde cada objeto de filtro contém a cadeia de filtro dentro
     * o resultado da função filterTermAccessor. Se nenhum filtro estiver configurado, retorna a matriz de dados
     * conforme previsto.
     */
    _filterData(data: T[]): T[];
    /**
     * Retorna uma cópia classificada dos dados se AMBSort tiver um tipo aplicado, caso contrário, simplesmente retorna
     * matriz de dados conforme fornecido. Usa o acessório de dados padrão para pesquisa de dados, a menos que
     * função classDataAccessor é definida.
     */
    _orderData(data: T[]): T[];
    /**
     * Retorna um splice paginado da matriz de dados fornecida de acordo com a página fornecida do MatPaginator
     * índice e comprimento. Se não houver paginador fornecido, retorna a matriz de dados conforme fornecido.
     */
    _pageData(data: T[]): T[];
    /**
     * Atualiza o paginador para refletir o comprimento dos dados filtrados e garante que a página
     * índice não excede a última página do paginador. Os valores são alterados em uma promessa resolvida para
     * proteja-se contra a mudança de propriedade dentro de uma rodada de detecção de mudanças.
     */
    _updatePaginator(filteredDataLength: number): void;
    /**
     * Usado pelo AMBTable. Chamado quando se conecta à fonte de dados.
     */
    connect(): BehaviorSubject<T[]>;
    /**
     * Usado pelo AMBTable. Chamada quando é destruída.
     */
    disconnect(): void;
}
