/**
 * @license
 * Copyright Bradesco S/A. All Rights Reserved.
 */
import { ElementRef, AfterViewInit, EventEmitter, OnInit, AfterContentInit, ViewContainerRef } from "@angular/core";
import { Observable } from 'rxjs/Rx';
/**
 * Definição da diretiva AMBDataFill
 *
 * @selector ambDataFill
 * @see {@link https://angular.io/api/core/Directive}
 */
export declare class AMBDataFillDirective implements OnInit, AfterViewInit, AfterContentInit {
    private elementRef;
    private viewContainer;
    private preLoader;
    /**
     * Armazena os parâmetros da requisição
     */
    private request;
    /**
     * Armazena a url do fluxo que se deseja consultar.
     */
    private fluxo;
    /**
     * Armazena a quantidade de ocorrências que será recebida pelo fluxo.
     */
    private maxOcorr;
    /**
     * Armazena o tamanho da página do fluxo.
     */
    private pageLength;
    /**
     * Verifica se a chamada deve ser feita quando o componente for inicializado.
     */
    private lazy;
    /**
     * Armazena dos dados do fluxo.
     */
    response: EventEmitter<Observable<any[]>>;
    /**
     * Armazena o objeto que é responsável por realizar a chama ao fluxo.
     */
    private _dataSource;
    /**
     * Armazena uma instância do serviço de log.
     */
    private _logger;
    /**
     * Construtor padrão
     * @param elementRef - Componete ao qual a diretiva está atrelada.
     */
    constructor(elementRef: ElementRef, viewContainer: ViewContainerRef);
    /**
     * Na inicialização da diretiva é realizada a configuração da chamada ao fluxo.
     */
    ngOnInit(): void;
    ngAfterContentInit(): void;
    /**
     * Após a devida renderização a chamada ao fluxo é realizada.
     */
    ngAfterViewInit(): void;
    /**
     * Método responsável por emitir os dados do fluxo;
     * @param observable - onde os dados estão sendo armazenados.
     */
    private subscribeObservable(observable);
    /**
     * Método responsável por realizar a paginação para a primeira página.
     */
    paginationFirst(): void;
    /**
     * Método responsável por realizar a paginação para a página anterior.
     */
    paginationPrevious(): void;
    /**
     * Método responsável por realizar a paginação para a próximo página.
     */
    paginationNext(): void;
    /**
     * Método responsável por realizar a paginação para a última página
     */
    paginationLast(): void;
    /**
     * Método responsável por realizar a paginação para a página inicial.
     */
    paginationInit(): void;
    private isPreloaderInterface(element);
}
