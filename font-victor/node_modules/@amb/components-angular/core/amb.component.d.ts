/**
 * @license
 * Copyright Bradesco S/A. All Rights Reserved.
 */
import { OnInit, OnDestroy, ElementRef, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, SimpleChanges } from '@angular/core';
/**
 * @name AMBComponent
 *
 * Responsável por disponibilizar um módulo padrão dos componentes AMB. Os componentes
 * AMB devem extender desta classe abstrata.
 *
 * @description
 * Estrutura baseada no padrão Angular, seguindo o ciclo de vida e eventos comuns.
 *
 * See {@link https://angular.io/guide/lifecycle-hooks}.
 */
export declare abstract class AMBComponent implements OnChanges, OnInit, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy {
    protected elementRef: ElementRef;
    /** ID único do componente. */
    id: string;
    /** Indica se o componente está desabilitado. */
    disabled: boolean;
    /** Indica se o componente deve ser renderizado (se será visível). */
    renderer: boolean;
    /** Associa um evento callback quando o componente perder o foco */
    onBlur: Function;
    /** Associa um evento callback quando o componente receber o foco */
    onFocus: Function;
    /**
     * @constructor
     * Construtor padrão.
     *
     * @description
     * Responsável por atribuir um ID ao componente quando o componente não
     * tiver um ID. Para o caso de sobrescrever este método, caso seja necessário a geração
     * do ID de forma automática pelo estrutural, manter a implementação:
     *
     * @example
     * if (!this.id) {
     *     this.id = UniqueIDGenerator.generateID();
     * }
     *
     * @param elementRef Elemento DOM representando o componente.
     */
    constructor(elementRef: ElementRef);
    /**
     * Retorna o elemento.
     */
    getElementRef(): ElementRef;
    /**
     * Retorna o elemento JQuery do componente.
     * @param element
     * @see {@link https://www.npmjs.com/package/@types/jquery}
     */
    getJqueryElement(element: string): JQuery;
    /**
     * Método chamado logo após as propriedades vinculadas a dados terem sido verificadas e antes de visualizar
     * e os filhos do conteúdo são verificados se pelo menos um deles tiver mudado.
     * O parâmetro `changes` contém as propriedades alteradas.
     *
     * @see {@link https://angular.io/api/core/OnChanges}
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Método chamado imediatamente depois que as propriedades vinculadas a dados da diretiva foram verificadas para a
     * primeira execução, e antes de qualquer um de seus filhos ter sido verificado. É invocado apenas uma vez quando
     * A diretriz é instanciada.
     *
     * @see {@link https://angular.io/api/core/OnInit}
     */
    ngOnInit(): void;
    /**
     * Método chamado para verificar as alterações nas diretrizes, além do padrão
     * algoritmo. O algoritmo de detecção de mudança padrão procura diferenças ao comparar
     * valores de propriedade vinculada por referência em detecções de alterações.
     *
     * Observe que, normalmente, uma diretiva não deve usar o `DoCheck` e {@link OnChanges} para responder a
     * muda na mesma entrada, como `ngOnChanges` continuará sendo chamado quando a mudança padrão
     * detector detecta mudanças.
     *
     * @see {@link https://angular.io/api/core/DoCheck}
     */
    ngDoCheck(): void;
    /**
     * Método chamado após o conteúdo de uma diretiva foi totalmente inicializado.
     *
     * @see {@link https://angular.io/api/core/AfterContentInit}
     */
    ngAfterContentInit(): void;
    /**
     * Método chamado após cada verificação do conteúdo de uma diretiva.
     *
     * @see {@link https://angular.io/api/core/AfterContentChecked}
     */
    ngAfterContentChecked(): void;
    /**
     * Método chamado após a exibição de um componente foi totalmente inicializado.
     *
     *
     * @see {@link https://angular.io/api/core/AfterViewInit}
     */
    ngAfterViewInit(): void;
    /**
     *  Método chamado depois de cada verificação da visão de um componente.
     *
     * @see {@link https://angular.io/api/core/AfterViewChecked}
     */
    ngAfterViewChecked(): void;
    /**
     * Método chamado quando uma diretiva, um pipe ou serviço é destruído.
     *
     * O retorno de chamada normalmente é usado para qualquer limpeza personalizada que precisa ocorrer quando a
     * instância é destruída.
     *
     * @see {@link https://angular.io/api/core/OnDestroy}
     */
    ngOnDestroy(): void;
}
