(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/BehaviorSubject'), require('rxjs/observable/from'), require('rxjs/operators')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/BehaviorSubject', 'rxjs/observable/from', 'rxjs/operators'], factory) :
	(factory((global['ngx-highlightjs'] = {}),global.ng.core,global.Rx,global.Rx.Observable,global.Rx.Observable.prototype));
}(this, (function (exports,core,BehaviorSubject,from,operators) { 'use strict';

var OPTIONS = new core.InjectionToken('OPTIONS');
var __decorate$2 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$1 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); };
};
exports.ɵc = (function () {
    function HighlightService(options) {
        this.options = {
            theme: 'github',
            path: 'assets/lib/hljs',
            auto: true
        };
        /** hljs script on load event */
        this.ready$ = new BehaviorSubject.BehaviorSubject(false);
        this.options = Object.assign({}, this.options, options);
        /** Load hljs script and style only once */
        this.loadScript();
        this.loadTheme();
    }
    HighlightService.prototype.loadScript = function () {
        var _this = this;
        var script = document.createElement('script');
        script.async = true;
        script.type = 'text/javascript';
        script.onload = function () {
            _this.ready$.next(true);
        };
        script.src = this.options.path + "/highlight.pack.js";
        document.head.appendChild(script);
    };
    HighlightService.prototype.loadTheme = function () {
        var style = document.createElement('link');
        style.rel = 'stylesheet';
        style.type = 'text/css';
        style.href = this.options.path + "/styles/" + this.options.theme + ".css";
        document.head.appendChild(style);
    };
    return HighlightService;
}());
exports.ɵc = __decorate$2([
    core.Injectable(),
    __param(0, core.Optional()), __param(0, core.Inject(OPTIONS)),
    __metadata$1("design:paramtypes", [Object])
], exports.ɵc);
var __decorate$1 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
};
/** There are 2 ways to set the code
 *  1 - using the [code] input (default) <code highlight [code]="yourCode"></code>
 *  2 - using element text content <code> {{yourCode}} </code>
 */
exports.ɵb = (function () {
    function HighlightDirective(el, renderer, hl) {
        this.renderer = renderer;
        this.hl = hl;
        this.hljsClass = true;
        this.el = el.nativeElement;
    }
    Object.defineProperty(HighlightDirective.prototype, "setCode", {
        /** Highlight code directly */
        set: function (code) {
            var _this = this;
            this.code = code;
            this.hl.ready$.pipe(operators.filter(function (ready) { return ready; }), operators.take(1), operators.tap(function () { return _this.highlightElement(_this.el, code); })).subscribe();
        },
        enumerable: true,
        configurable: true
    });
    HighlightDirective.prototype.ngOnInit = function () {
        var _this = this;
        /** If code is undefined, highlight using element text content */
        if (!this.code && this.hl.options.auto) {
            this.hl.ready$.pipe(operators.filter(function (ready) { return ready; }), operators.take(1), operators.tap(function () {
                _this.highlightTextContent();
                /** Highlight when text content changes */
                _this.domObs = new MutationObserver(function () { return _this.highlightTextContent(); });
                _this.domObs.observe(_this.el, { childList: true, subtree: true });
            })).subscribe();
        }
    };
    /** Highlight using element text content */
    HighlightDirective.prototype.highlightTextContent = function () {
        if (!this.highlight) {
            /** <code highlight [textContent]="code"></code> */
            if (this.el.tagName.toLowerCase() === 'code') {
                this.highlightElement(this.el, this.el.innerText.trim());
            }
            else {
                console.warn("[HighlightDirective]: Use 'highlight' on <code> elements only");
            }
        }
        else if (this.highlight === 'all') {
            /** <div highlight="all">
             *    <pre><code [textContent]="code"></code></pre>
             *    <pre><code [textContent]="code"></code></pre>
             *  </div>
             */
            this.highlightChildren(this.el, 'pre code');
        }
        else {
            /** <div highlight="section code">
             *    <section><code [textContent]="code"></code></section>
             *    <section><code [textContent]="code"></code></section>
             *  </div>
             */
            this.highlightChildren(this.el, this.highlight);
        }
    };
    /** Highlight single element */
    HighlightDirective.prototype.highlightElement = function (el, code) {
        var highlightedCode = hljs.highlightAuto(code).value;
        if (highlightedCode !== el.innerHTML) {
            this.renderer.setProperty(el, 'innerHTML', highlightedCode);
        }
    };
    /** Highlight children */
    HighlightDirective.prototype.highlightChildren = function (el, selector) {
        var _this = this;
        var codeElements = el.querySelectorAll(selector);
        /** highlight all children with the same selector */
        from.from(codeElements).pipe(operators.filter(function (code) { return code.childNodes.length === 1 && code.childNodes[0].nodeName === '#text'; }), operators.map(function (codeElement) { return _this.highlightElement(codeElement, codeElement.innerText.trim()); }), operators.take(1)).subscribe();
    };
    HighlightDirective.prototype.ngOnDestroy = function () {
        /** Disconnect MutationObserver */
        if (!this.code && this.hl.options.auto) {
            this.domObs.disconnect();
        }
    };
    return HighlightDirective;
}());
__decorate$1([
    core.Input(),
    __metadata("design:type", String)
], exports.ɵb.prototype, "highlight", void 0);
__decorate$1([
    core.Input('code'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], exports.ɵb.prototype, "setCode", null);
__decorate$1([
    core.HostBinding('class.hljs'),
    __metadata("design:type", Object)
], exports.ɵb.prototype, "hljsClass", void 0);
exports.ɵb = __decorate$1([
    core.Directive({
        selector: '[highlight]'
    }),
    __metadata("design:paramtypes", [core.ElementRef, core.Renderer2, exports.ɵc])
], exports.ɵb);
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
function HighlightFactory(options) {
    return new exports.ɵc(options);
}
exports.HighlightModule = HighlightModule_1 = (function () {
    function HighlightModule() {
    }
    HighlightModule.forRoot = function (options) {
        return {
            ngModule: HighlightModule_1,
            providers: [
                { provide: OPTIONS, useValue: options },
                {
                    provide: exports.ɵc,
                    useFactory: HighlightFactory,
                    deps: [OPTIONS]
                }
            ]
        };
    };
    return HighlightModule;
}());
exports.HighlightModule = HighlightModule_1 = __decorate([
    core.NgModule({
        declarations: [exports.ɵb],
        exports: [exports.ɵb]
    })
], exports.HighlightModule);
var HighlightModule_1;

exports.ɵa = HighlightFactory;
exports.ɵd = OPTIONS;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-highlightjs.umd.js.map
