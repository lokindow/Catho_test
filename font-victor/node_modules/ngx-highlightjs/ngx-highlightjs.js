import { Directive, ElementRef, HostBinding, Inject, Injectable, InjectionToken, Input, NgModule, Optional, Renderer2 } from '@angular/core';
import { BehaviorSubject as BehaviorSubject$1 } from 'rxjs/BehaviorSubject';
import { from as from$1 } from 'rxjs/observable/from';
import { filter, map, take, tap } from 'rxjs/operators';

const OPTIONS = new InjectionToken('OPTIONS');

var __decorate$2 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$1 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
let HighlightService = class HighlightService {
    constructor(options) {
        this.options = {
            theme: 'github',
            path: 'assets/lib/hljs',
            auto: true
        };
        /** hljs script on load event */
        this.ready$ = new BehaviorSubject$1(false);
        this.options = Object.assign({}, this.options, options);
        /** Load hljs script and style only once */
        this.loadScript();
        this.loadTheme();
    }
    loadScript() {
        const script = document.createElement('script');
        script.async = true;
        script.type = 'text/javascript';
        script.onload = () => {
            this.ready$.next(true);
        };
        script.src = `${this.options.path}/highlight.pack.js`;
        document.head.appendChild(script);
    }
    loadTheme() {
        const style = document.createElement('link');
        style.rel = 'stylesheet';
        style.type = 'text/css';
        style.href = `${this.options.path}/styles/${this.options.theme}.css`;
        document.head.appendChild(style);
    }
};
HighlightService = __decorate$2([
    Injectable(),
    __param(0, Optional()), __param(0, Inject(OPTIONS)),
    __metadata$1("design:paramtypes", [Object])
], HighlightService);

var __decorate$1 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/** There are 2 ways to set the code
 *  1 - using the [code] input (default) <code highlight [code]="yourCode"></code>
 *  2 - using element text content <code> {{yourCode}} </code>
 */
let HighlightDirective = class HighlightDirective {
    constructor(el, renderer, hl) {
        this.renderer = renderer;
        this.hl = hl;
        this.hljsClass = true;
        this.el = el.nativeElement;
    }
    /** Highlight code directly */
    set setCode(code) {
        this.code = code;
        this.hl.ready$.pipe(filter(ready => ready), take(1), tap(() => this.highlightElement(this.el, code))).subscribe();
    }
    ngOnInit() {
        /** If code is undefined, highlight using element text content */
        if (!this.code && this.hl.options.auto) {
            this.hl.ready$.pipe(filter(ready => ready), take(1), tap(() => {
                this.highlightTextContent();
                /** Highlight when text content changes */
                this.domObs = new MutationObserver(() => this.highlightTextContent());
                this.domObs.observe(this.el, { childList: true, subtree: true });
            })).subscribe();
        }
    }
    /** Highlight using element text content */
    highlightTextContent() {
        if (!this.highlight) {
            /** <code highlight [textContent]="code"></code> */
            if (this.el.tagName.toLowerCase() === 'code') {
                this.highlightElement(this.el, this.el.innerText.trim());
            }
            else {
                console.warn(`[HighlightDirective]: Use 'highlight' on <code> elements only`);
            }
        }
        else if (this.highlight === 'all') {
            /** <div highlight="all">
             *    <pre><code [textContent]="code"></code></pre>
             *    <pre><code [textContent]="code"></code></pre>
             *  </div>
             */
            this.highlightChildren(this.el, 'pre code');
        }
        else {
            /** <div highlight="section code">
             *    <section><code [textContent]="code"></code></section>
             *    <section><code [textContent]="code"></code></section>
             *  </div>
             */
            this.highlightChildren(this.el, this.highlight);
        }
    }
    /** Highlight single element */
    highlightElement(el, code) {
        const highlightedCode = hljs.highlightAuto(code).value;
        if (highlightedCode !== el.innerHTML) {
            this.renderer.setProperty(el, 'innerHTML', highlightedCode);
        }
    }
    /** Highlight children */
    highlightChildren(el, selector) {
        const codeElements = el.querySelectorAll(selector);
        /** highlight all children with the same selector */
        from$1(codeElements).pipe(filter((code) => code.childNodes.length === 1 && code.childNodes[0].nodeName === '#text'), map((codeElement) => this.highlightElement(codeElement, codeElement.innerText.trim())), take(1)).subscribe();
    }
    ngOnDestroy() {
        /** Disconnect MutationObserver */
        if (!this.code && this.hl.options.auto) {
            this.domObs.disconnect();
        }
    }
};
__decorate$1([
    Input(),
    __metadata("design:type", String)
], HighlightDirective.prototype, "highlight", void 0);
__decorate$1([
    Input('code'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], HighlightDirective.prototype, "setCode", null);
__decorate$1([
    HostBinding('class.hljs'),
    __metadata("design:type", Object)
], HighlightDirective.prototype, "hljsClass", void 0);
HighlightDirective = __decorate$1([
    Directive({
        selector: '[highlight]'
    }),
    __metadata("design:paramtypes", [ElementRef, Renderer2, HighlightService])
], HighlightDirective);

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
function HighlightFactory(options) {
    return new HighlightService(options);
}
let HighlightModule = HighlightModule_1 = class HighlightModule {
    static forRoot(options) {
        return {
            ngModule: HighlightModule_1,
            providers: [
                { provide: OPTIONS, useValue: options },
                {
                    provide: HighlightService,
                    useFactory: HighlightFactory,
                    deps: [OPTIONS]
                }
            ]
        };
    }
};
HighlightModule = HighlightModule_1 = __decorate([
    NgModule({
        declarations: [HighlightDirective],
        exports: [HighlightDirective]
    })
], HighlightModule);
var HighlightModule_1;

/**
 * Generated bundle index. Do not edit.
 */

export { HighlightDirective as ɵb, HighlightFactory as ɵa, HighlightService as ɵc, OPTIONS as ɵd, HighlightModule };
//# sourceMappingURL=ngx-highlightjs.js.map
